services:
  backend:
    build:
      context: ./backend/django
      dockerfile: Dockerfile
    image: philgeps-backend:latest
    ports:
      - "3200:8000"
    environment:
      # Production mode - minimal logging
      DEBUG: "False"
      # Django settings
      ALLOWED_HOSTS: "localhost,127.0.0.1,philgeps-api.simple-systems.dev,philgeps.simple-systems.dev"
      CORS_ALLOWED_ORIGINS: "https://philgeps.simple-systems.dev"
      CSRF_TRUSTED_ORIGINS: "https://philgeps.simple-systems.dev"
      SECRET_KEY: "your-secret-key"
      # Data directory
      PARQUET_DIR: "/data/parquet"
      # Gunicorn settings for streaming (gevent worker, extended timeouts)
      # Increased timeout for large exports (1.4GB can take 10+ minutes)
      GUNICORN_TIMEOUT: "900"
      GUNICORN_GRACEFUL_TIMEOUT: "930"
      GUNICORN_KEEPALIVE: "5"
      # Python logging
      PYTHONUNBUFFERED: "1"
      # volumes:
      #   - ./backend/django/static_data:/data/parquet

    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      args:
        VITE_API_URL: https://philgeps-api.simple-systems.dev
    image: philgeps-frontend:latest
    ports:
      - "3000:80"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      backend:
        condition: service_healthy
      
  # Optional: Use this if you want to run cloudflared in Docker instead of as a background service
  # cloudflared:
  #   image: cloudflare/cloudflared:latest
  #   restart: unless-stopped
  #   command: tunnel --no-autoupdate run
  #   environment:
  #     TUNNEL_TOKEN: "<your-cloudflare-tunnel-token>"
  #   depends_on:
  #     - backend
  #     - frontend
